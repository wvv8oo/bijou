// Generated by CoffeeScript 1.9.3
(function() {
  var BaseEntity, _, _async, _knex, _log, _store,
    slice = [].slice;

  _store = require('./store');

  _async = require('async');

  _ = require('lodash');

  _knex = require('knex');

  _log = function(log) {
    if (process.env.DEBUG) {
      return console.log(log);
    }
  };

  BaseEntity = (function() {
    function BaseEntity(schema) {
      this.schema = schema;
      if (this.schema) {
        this.fields = _.keys(this.schema.fields);
        this.fields.push('id');
      } else {
        this.fields = [];
      }
    }

    BaseEntity.prototype.raw = function(sql) {
      return _store.database().raw(sql);
    };

    BaseEntity.prototype.execute = function(sql, cb) {
      return this.raw(sql).asCallback(function(err, result) {
        return cb(err, result && result[0]);
      });
    };

    BaseEntity.prototype.pagination = function(pageIndex, pageSize) {
      pageIndex = parseInt(pageIndex);
      if (isNaN(pageIndex)) {
        pageIndex = 1;
      }
      pageSize = parseInt(pageSize);
      if (isNaN(pageSize)) {
        pageSize = 10;
      }
      return {
        pageSize: pageSize,
        offset: pageIndex * pageSize - pageSize,
        limit: pageSize,
        pageIndex: pageIndex
      };
    };

    BaseEntity.prototype.getFields = function(without) {
      var params;
      params = [this.fields].concat(without);
      return _.without.apply(_, params);
    };


    /*
      调用方式
      1. exists(cond, cb)
      2. exists(matches, cond, cb)
      适用于更新时，查询某字段是否存在。如下面的代码表示，在project_id=1的数据中，查询title='标题'，但不包括id为1的数据
      exists({title: '标题'}, {project_id: 1}, {id: 1}, cb)
      3. exists(matches, cond, notMatches, cb)
     */

    BaseEntity.prototype.exists = function() {
      var args, cb, cond, entity, key, matches, notMatches, value;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (args.length === 2 && typeof args[1] === 'function') {
        cond = args[0];
        cb = args[1];
        return this.count(cond, function(err, count) {
          return cb(err, !err && count > 0);
        });
      }
      matches = args[0];
      cond = args[1];
      if (typeof args[2] === 'function') {
        cb = args[2];
        notMatches = void 0;
      } else {
        cb = args[3];
        notMatches = args[2];
      }
      entity = this.entity();
      entity.select(_knex.raw('COUNT(*)'));
      entity.where(cond);
      entity.where(function() {
        var key, results, value;
        results = [];
        for (key in matches) {
          value = matches[key];
          results.push(this.orWhere(key, value));
        }
        return results;
      });
      notMatches = notMatches || {};
      for (key in notMatches) {
        value = notMatches[key];
        entity.where(key, '<>', value);
      }
      return this.scalar(entity.toString(), function(err, total) {
        return cb(err, total > 0);
      });
    };

    BaseEntity.prototype.count = function(cond, cb) {
      var query;
      query = this.entity().where(cond);
      query.select(_knex.raw('COUNT(*)'));
      return this.scalar(query.toString(), cb);
    };

    BaseEntity.prototype.scalar = function(sql, cb) {
      _log(sql);
      return this.execute(sql, function(err, result) {
        var cell, key, ref, value;
        cell = null;
        if (err || !result || result.length === 0) {
          return cb(err, cell);
        }
        ref = result[0];
        for (key in ref) {
          value = ref[key];
          cell = value;
          break;
        }
        return cb(null, cell);
      });
    };

    BaseEntity.prototype.entity = function(withAlias) {
      var name, ref;
      name = "" + ((ref = this.schema) != null ? ref.name : void 0) + (withAlias ? ' AS A' : '');
      return _store.database()(name);
    };

    BaseEntity.prototype.findById = function(id, fields, cb) {
      var cond, entity;
      if (!cb) {
        cb = fields;
        fields = '*';
      }
      cond = {
        id: id
      };
      entity = this.entity().where(cond).select(fields);
      _log(entity.toString());
      return entity.asCallback(function(err, result) {
        return cb(err, result && result[0]);
      });
    };

    BaseEntity.prototype.findOne = function(cond, options, cb) {
      if (typeof options === 'function') {
        cb = options;
        options = {};
      }
      return this.find(cond, options, function(err, data) {
        return cb(err, data && data[0]);
      });
    };

    BaseEntity.prototype.pageCount = function(pagination) {
      return Math.ceil(pagination.recordCount / pagination.pageSize);
    };

    BaseEntity.prototype.find = function(cond, options, cb) {
      var key, queue, self, value;
      if (typeof options === 'function') {
        cb = options;
        options = {};
      }
      cond = cond || {};
      for (key in cond) {
        value = cond[key];
        if (value === void 0) {
          delete cond[key];
        }
      }
      queue = [];
      self = this;
      queue.push(function(done) {
        var exec;
        if (!options.pagination) {
          return done(null, 0);
        }
        exec = self.entity(true).where(cond);
        if (typeof options.beforeQuery === "function") {
          options.beforeQuery(exec, true);
        }
        exec.select(_knex.raw('count(*)'));
        return self.scalar(exec.toString(), function(err, count) {
          return done(null, count);
        });
      });
      queue.push(function(count, done) {
        var entity, page, ref;
        entity = self.entity(true).where(cond);
        if (typeof options.beforeQuery === "function") {
          options.beforeQuery(entity);
        }
        if (typeof options.fields === 'function') {
          options.fields(entity);
        } else {
          entity.select(options.fields || '*');
        }
        ref = options.orderBy || {};
        for (key in ref) {
          value = ref[key];
          entity.orderBy(key, value);
        }
        page = options.pagination;
        if (page) {
          page.limit = page.limit || 10;
          page.offset = page.offset || 0;
          page.recordCount = count;
          page.pageSize = page.pageSize || 10;
          page.pageIndex = page.pageIndex || 1;
          page.pageCount = self.pageCount(page);
          entity.limit(page.limit);
          entity.offset(page.offset);
        }
        _log(entity.toString());
        return entity.asCallback(function(err, items) {
          var result;
          if (err) {
            return done(err);
          }
          if (!options.pagination) {
            return done(err, items);
          }
          result = {
            items: items,
            pagination: page || {}
          };
          return done(err, result);
        });
      });
      return _async.waterfall(queue, cb);
    };

    BaseEntity.prototype.updateById = function(id, data, cb) {
      return this.update({
        id: id
      }, data, cb);
    };

    BaseEntity.prototype.update = function(cond, data, options, cb) {
      var entity;
      if (typeof options === 'function') {
        cb = options;
        options = {};
      }
      cond = cond || {};
      data = this.parse(data);
      entity = this.entity().where(cond);
      if (typeof options.beforeQuery === "function") {
        options.beforeQuery(entity);
      }
      return entity.update(data).asCallback(function(err) {
        return cb(err);
      });
    };

    BaseEntity.prototype.save = function(data, cb) {
      var entity, isUpdate;
      if (data == null) {
        data = {};
      }
      data = this.parse(data);
      entity = this.entity();
      isUpdate = Boolean(data.id);
      if (isUpdate) {
        entity.where('id', '=', data.id).update(data);
      } else {
        entity.insert(data);
      }
      return entity.asCallback(function(err, result) {
        if (err) {
          return cb(err);
        }
        return cb(err, isUpdate ? result : result[0]);
      });
    };

    BaseEntity.prototype.removeById = function(id, cb) {
      return this.remove({
        id: id
      }, cb);
    };

    BaseEntity.prototype.remove = function(cond, cb) {
      return this.entity().where(cond).del().asCallback(cb);
    };

    BaseEntity.prototype.insert = function(datas, cb) {
      return this.entity().insert(datas).asCallback(cb);
    };

    BaseEntity.prototype.validate = function(value, rule) {
      if (typeof rule === 'string') {
        rule = {
          type: rule
        };
      }
      switch (rule.type) {
        case 'integer':
          value = parseInt(value);
          if (isNaN(value)) {
            value = rule.def || 0;
          }
          break;
        case 'dateTime':
          value = new Date(value);
          break;
        case '':
        case 'string':
          value = value && value.substr(0, 255);
          break;
        case 'text':
          if (rule.maxLength) {
            value = value && value.substr(0, rule.maxLength);
          }
      }
      return value;
    };

    BaseEntity.prototype.parse = function(data) {
      var fields, key, result, value;
      fields = _.clone(this.schema.fields);
      fields.id = 'integer';
      data = _.pick(data, _.keys(fields));
      result = {};
      for (key in data) {
        value = data[key];
        result[key] = this.validate(value, fields[key]);
      }
      return result;
    };

    return BaseEntity;

  })();

  module.exports = BaseEntity;

}).call(this);
