// Generated by CoffeeScript 1.9.3

/*
  路由
 */

(function() {
  var ACTIONS, _, _app, _async, _fs, _http, _log, _options, _path, apiRouter, executeRoute, getPaths;

  _ = require('lodash');

  _http = require('./http');

  _async = require('async');

  _path = require('path');

  _fs = require('fs');

  _app = null;

  _options = null;

  require('colors');

  ACTIONS = ["post", "get", "put", "delete", "patch"];

  _log = function(message) {
    if (!_options.log) {
      return;
    }
    return console.log(message);
  };

  getPaths = function(router) {
    var pathSuffix, paths;
    paths = {};
    pathSuffix = {
      post: "",
      get: "/:id(\\d+)?",
      put: "/:id(\\d+)?",
      "delete": "/:id(\\d+)",
      patch: '/:id(\\d+)'
    };
    ACTIONS.forEach(function(method) {
      var path, suffix;
      suffix = router.suffix === false ? '' : pathSuffix[method];
      path = router.paths && (router.paths[method] || router.paths.all);
      path = path || (function() {
        if (typeof router.path === 'object') {
          return router.path;
        }
        return "" + _options.root + router.path + suffix;
      })();
      if (typeof path !== 'object') {
        path = path.replace('#{rootAPI}', _options.root);
      }
      return paths[method] = path;
    });
    return paths;
  };

  executeRoute = function(special, action, biz, method, path, router) {
    return _app[action](path, function(req, res, next) {
      var client, queue;
      client = {
        params: req.params,
        body: req.body,
        query: req.query,
        router: router
      };
      queue = [];
      queue.push(function(done) {
        if (!_options.onBeforeHandler) {
          return done(null);
        }
        return _options.onBeforeHandler(client, req, function(err, newClient) {
          client = newClient;
          return done(null);
        });
      });
      queue.push(function(done) {
        if (!_options.requestPermission) {
          return done(null);
        }
        return _options.requestPermission(client, router, action, function(err, allow) {
          if (!allow) {
            return done(_http.unauthorizedError());
          }
          return done(err);
        });
      });
      return _async.waterfall(queue, function(err) {
        if (err) {
          return _http.responseError(err, res);
        }
        if (special) {
          return biz[method].call(biz, req, res, next, client);
        }
        return biz[method].call(biz, client, function(err, result) {
          return _http.responseJSON(err, result, res, action);
        });
      });
    });
  };

  apiRouter = function(router) {
    var biz, file, paths;
    file = _path.resolve(_path.dirname(require.main.filename), _options.biz);
    file = _path.join(file, router.biz || router.path);
    if (_fs.existsSync(file)) {
      return _log(("File not found -> " + file).red);
    }
    biz = require(file);
    paths = getPaths(router);
    return ACTIONS.forEach(function(action) {
      var errMsg, isDefineMethod, method, path, special;
      path = paths[action];
      method = (router.methods || {})[action];
      isDefineMethod = Boolean(method);
      if (method === false || method === 0) {
        return;
      }
      method = method || action;
      if (!biz[method] && (method === 'post' || method === 'put' || method === 'patch')) {
        method = 'save';
      }
      if (special = /^\{(.+)\}$/i.test(method)) {
        method = RegExp.$1;
      }
      errMsg = "Handler not found: " + action + ": " + path + " -> " + biz + "." + method;
      if (!biz[method]) {
        return _log(isDefineMethod ? errMsg.red : errMsg.yellow);
      }
      _log((action + ": " + path + " -> " + biz + "." + method).green);
      return executeRoute(special, action, biz, method, path, router);
    });
  };

  module.exports = function(app, options) {
    var i, len, ref, results, router;
    _app = app;
    _options = options;
    ref = options.routers;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      router = ref[i];
      results.push(apiRouter(router));
    }
    return results;
  };

}).call(this);
