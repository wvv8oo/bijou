// Generated by CoffeeScript 1.9.3
(function() {
  var HTTPStatusError;

  HTTPStatusError = (function() {
    function HTTPStatusError(status1, message1, code1) {
      this.status = status1;
      this.message = message1;
      this.code = code1;
    }

    HTTPStatusError.prototype.toJSON = function() {
      return {
        message: this.message,
        code: this.code,
        status: this.status
      };
    };

    return HTTPStatusError;

  })();

  exports.HTTPStatusError = HTTPStatusError;

  exports.httpStatusError = function(status, message, code) {
    return new HTTPStatusError(status, message, code);
  };

  exports.notAcceptableError = function(message) {
    return new HTTPStatusError(406, message);
  };

  exports.notFoundError = function(message) {
    return new HTTPStatusError(404, message);
  };

  exports.forbiddenError = function(message) {
    return new HTTPStatusError(403, message);
  };

  exports.unauthorizedError = function(message) {
    return new HTTPStatusError(401, message);
  };

  exports.responseError = function(err, res) {
    var message, status;
    status = 500;
    message = err;
    if (err instanceof HTTPStatusError) {
      switch (err.status) {
        case 406:
          return this.responseAcceptable(err.toJSON(), res);
        default:
          status = err.status;
          message = err.message;
      }
    }
    res.statusCode = status;
    if (typeof message === 'object') {
      return res.json(message);
    } else {
      return res.end(message || '');
    }
  };

  exports.responseJSON = function(err, result, res, action) {
    if (err) {
      return this.responseError(err, res);
    }
    result = result || {};
    return res.json(result);
  };

  exports.responseNotFound = function(res) {
    return this.responseError(exports.notFoundError(), res);
  };

  exports.responseAcceptable = function(data, res) {
    res.statusCode = 406;
    if (typeof data === 'object') {
      return res.json(data);
    } else {
      return res.end(data || '');
    }
  };

}).call(this);
